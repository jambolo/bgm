(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
// DRAG_THRESHOLD_PIXELS = 16
var BGMGameScene, BGMHudScene, init;

BGMGameScene = class BGMGameScene extends Phaser.Scene {
  constructor() {
    var i, j, k, l, ref, ref1;
    super();
    Phaser.Scene.call(this, {
      key: 'game',
      active: true
    });
    this.width = 60;
    this.height = 30;
    this.grid = new Array(this.width);
    for (i = k = 0, ref = this.width; (0 <= ref ? k < ref : k > ref); i = 0 <= ref ? ++k : --k) {
      this.grid[i] = new Array(this.height);
      for (j = l = 0, ref1 = this.height; (0 <= ref1 ? l < ref1 : l > ref1); j = 0 <= ref1 ? ++l : --l) {
        this.grid[i][j] = {
          bomb: false,
          sprite: null
        };
      }
    }
    this.touch = {
      ENGAGE_DRAG_DISTANCE: 10,
      DOUBLE_CLICK_MS: 400,
      tracked: [],
      dragX: 0,
      dragY: 0,
      dragging: false,
      doubleClickTime: null,
      pinchAnchor: null,
      pinchAnchorWorld: null
    };
  }

  preload() {
    this.load.image('blank', 'images/blank.gif');
    return this.load.image('flag', 'images/bombflagged.gif');
  }

  create() {
    var i, j, k, l, ref, ref1;
    for (i = k = 0, ref = this.width; (0 <= ref ? k < ref : k > ref); i = 0 <= ref ? ++k : --k) {
      for (j = l = 0, ref1 = this.height; (0 <= ref1 ? l < ref1 : l > ref1); j = 0 <= ref1 ? ++l : --l) {
        this.grid[i][j].sprite = this.add.image(i * 16, j * 16, 'blank');
        this.grid[i][j].sprite.setOrigin(0, 0);
        this.grid[0][0].sprite.setTexture('flag');
      }
    }
    this.input.addPointer(1);
    this.input.on('pointerdown', (pointer) => {
      var clickDelta, now;
      if (this.touch.tracked.length === 0) {
        this.touch.dragging = false;
      }
      console.log(`new pointer ${pointer.id}`);
      this.touch.tracked.push({
        id: pointer.id,
        pos: pointer.position.clone()
      });
      if (this.touch.tracked.length === 1) {
        this.setDragPoint();
      }
      if (this.touch.tracked.length === 2) {
        // We just added a second touch spot. Calculate the anchor for pinching now
        this.calcPinchAnchor();
      }
      if (this.touch.tracked.length > 1) {
        this.touch.dragging = true;
        return this.touch.doubleClickTime = null;
      } else if (!this.touch.dragging) {
        now = new Date().getTime();
        if (this.touch.doubleClickTime !== null) {
          // second click
          clickDelta = now - this.touch.doubleClickTime;
          if (clickDelta < this.touch.DOUBLE_CLICK_MS) {
            this.touch.doubleClickTime = null;
            console.log(`DOUBLE TAP ${this.touch.tracked[0].pos.x} ${this.touch.tracked[0].pos.y}`);
            return;
          }
        }
        return this.touch.doubleClickTime = now;
      }
    });
    this.input.on('pointermove', (pointer) => {
      var currDistance, deltaDistance, dragDistance, dx, dy, halfH, halfW, index, m, newZoom, offsetX, offsetY, prevDistance, prevX, prevY, ref2;
      prevDistance = 0;
      if (this.touch.tracked.length >= 2) {
        prevDistance = this.calcDistance(this.touch.tracked[0].pos.x, this.touch.tracked[0].pos.y, this.touch.tracked[1].pos.x, this.touch.tracked[1].pos.y);
      }
      if (this.touch.tracked.length === 1) {
        prevX = this.touch.tracked[0].pos.x;
        prevY = this.touch.tracked[0].pos.y;
      }
      index = -1;
      for (i = m = 0, ref2 = this.touch.tracked.length; (0 <= ref2 ? m < ref2 : m > ref2); i = 0 <= ref2 ? ++m : --m) {
        if (this.touch.tracked[i].id === pointer.id) {
          index = i;
          break;
        }
      }
      if (index !== -1) {
        // console.log "updating touch #{id}, tracking #{@touch.tracked.length} touches"
        this.touch.tracked[index].pos = pointer.position.clone();
      }
      if (this.touch.tracked.length === 1) {
        // single touch, consider dragging
        dragDistance = this.calcDistance(this.touch.dragX, this.touch.dragY, this.touch.tracked[0].pos.x, this.touch.tracked[0].pos.y);
        if (this.touch.dragging || (dragDistance > this.touch.ENGAGE_DRAG_DISTANCE)) {
          this.touch.dragging = true;
          if (dragDistance > 0.5) {
            dx = this.touch.tracked[0].pos.x - this.touch.dragX;
            dy = this.touch.tracked[0].pos.y - this.touch.dragY;
            // console.log "single drag: #{dx}, #{dy}"
            this.cameras.main.scrollX -= dx / this.cameras.main.zoom;
            this.cameras.main.scrollY -= dy / this.cameras.main.zoom;
            console.log(`scroll ${this.cameras.main.scrollX} ${this.cameras.main.zoom} ${this.cameras.main.width}`);
          }
          this.setDragPoint();
        }
      } else if (this.touch.tracked.length >= 2) {
        // at least two fingers present, check for pinch/zoom
        currDistance = this.calcDistance(this.touch.tracked[0].pos.x, this.touch.tracked[0].pos.y, this.touch.tracked[1].pos.x, this.touch.tracked[1].pos.y);
        deltaDistance = currDistance - prevDistance;
        if (deltaDistance !== 0) {
          newZoom = this.cameras.main.zoom * (1 + (deltaDistance * 4 / this.cameras.main.width));
          if (newZoom < 0.1) {
            newZoom = 0.1;
          }
          if (newZoom > 5) {
            newZoom = 5;
          }
          this.cameras.main.zoom = newZoom;
          halfW = this.cameras.main.width / 2;
          halfH = this.cameras.main.height / 2;
          offsetX = (this.touch.pinchAnchor.x - halfW) / newZoom;
          offsetY = (this.touch.pinchAnchor.y - halfH) / newZoom;
          this.cameras.main.scrollX = this.touch.pinchAnchorWorld.x - halfW - offsetX;
          this.cameras.main.scrollY = this.touch.pinchAnchorWorld.y - halfH - offsetY;
        }
      }
    });
    return this.input.on('pointerup', (pointer) => {
      var hud, index, m, ref2, worldPos;
      if (this.touch.tracked.length === 1) {
        if (!this.touch.dragging) {
          worldPos = this.cameras.main.getWorldPoint(this.touch.tracked[0].pos.x, this.touch.tracked[0].pos.y);
          console.log(`TAP ${worldPos.x} ${worldPos.y} ${this.cameras.main.scrollX} ${this.cameras.main.scrollY} ${this.cameras.main.zoom}`);
        }
      }
      index = -1;
      for (i = m = 0, ref2 = this.touch.tracked.length; (0 <= ref2 ? m < ref2 : m > ref2); i = 0 <= ref2 ? ++m : --m) {
        if (this.touch.tracked[i].id === pointer.id) {
          index = i;
          break;
        }
      }
      if (index !== -1) {
        this.touch.tracked.splice(index, 1);
        if (this.touch.tracked.length === 1) {
          this.setDragPoint();
        }
        if (index < 2) {
          // We just forgot one of our pinch touches. Pick a new anchor spot.
          this.calcPinchAnchor();
        }
      }
      hud = this.scene.get('hud');
      hud.glass.alpha = 0;
    });
  }

  calcDistance(x1, y1, x2, y2) {
    var dx, dy;
    dx = x2 - x1;
    dy = y2 - y1;
    return Math.sqrt(dx * dx + dy * dy);
  }

  setDragPoint() {
    this.touch.dragX = this.touch.tracked[0].pos.x;
    return this.touch.dragY = this.touch.tracked[0].pos.y;
  }

  calcPinchAnchor() {
    var hud, pinchX, pinchY;
    if (this.touch.tracked.length >= 2) {
      pinchX = Math.floor((this.touch.tracked[0].pos.x + this.touch.tracked[1].pos.x) / 2);
      pinchY = Math.floor((this.touch.tracked[0].pos.y + this.touch.tracked[1].pos.y) / 2);
      this.touch.pinchAnchor = {
        x: pinchX,
        y: pinchY
      };
      this.touch.pinchAnchorWorld = this.cameras.main.getWorldPoint(pinchX, pinchY); // { x: pinchX, y: pinchY }
      console.log(`pinchAnchor ${this.touch.pinchAnchor.x} ${this.touch.pinchAnchor.y}`);
      hud = this.scene.get('hud');
      hud.glass.x = this.touch.pinchAnchor.x;
      hud.glass.y = this.touch.pinchAnchor.y;
      return hud.glass.alpha = 1;
    }
  }

  tap(worldX, worldY) {
    var hud, x, y;
    hud = this.scene.get('hud');
    hud.debugText.text = `Tapped: ${worldX.toFixed(1)} ${worldY.toFixed(1)}`;
    if ((worldX >= 0) && (worldX < (this.width * 16)) && (worldY >= 0) && (worldY < (this.height * 16))) {
      x = Math.floor(worldX / 16);
      y = Math.floor(worldY / 16);
      this.grid[x][y].bomb = !this.grid[x][y].bomb;
      if (this.grid[x][y].bomb) {
        return this.grid[x][y].sprite.setTexture('flag');
      } else {
        return this.grid[x][y].sprite.setTexture('blank');
      }
    }
  }

  update() {}

};

BGMHudScene = class BGMHudScene extends Phaser.Scene {
  constructor() {
    super();
    Phaser.Scene.call(this, {
      key: 'hud',
      active: true
    });
  }

  preload() {
    return this.load.image('glass', 'images/glass.gif');
  }

  create() {
    this.debugText = this.add.text(0, 0, 'Tap somewhere!');
    this.glass = this.add.image(50, 50, 'glass');
    this.glass.setOrigin(0.6, 0.3); // roughly the middle of the magnifying glass
    return this.glass.alpha = 0;
  }

};

init = function() {
  var config, game;
  console.log("Bad Guy Minesweeper: init()");
  config = {
    type: Phaser.AUTO,
    width: document.documentElement.clientWidth,
    height: document.documentElement.clientHeight,
    backgroundColor: '#2d2d2d',
    parent: 'screen',
    input: {
      activePointers: 2
    },
    scene: [BGMGameScene, BGMHudScene]
  };
  return game = new Phaser.Game(config);
};

window.addEventListener('load', function(e) {
  return init();
}, false);


},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
