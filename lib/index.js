(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
var BGMGameScene, BGMHudScene, DRAG_THRESHOLD_PIXELS, init;

DRAG_THRESHOLD_PIXELS = 16;

BGMGameScene = class BGMGameScene extends Phaser.Scene {
  constructor() {
    var i, j, k, l, ref, ref1;
    super();
    Phaser.Scene.call(this, {
      key: 'game',
      active: true
    });
    this.dragAccumulator = null;
    this.dragged = false;
    this.width = 60;
    this.height = 30;
    this.grid = new Array(this.width);
    for (i = k = 0, ref = this.width; (0 <= ref ? k < ref : k > ref); i = 0 <= ref ? ++k : --k) {
      this.grid[i] = new Array(this.height);
      for (j = l = 0, ref1 = this.height; (0 <= ref1 ? l < ref1 : l > ref1); j = 0 <= ref1 ? ++l : --l) {
        this.grid[i][j] = {
          bomb: false,
          sprite: null
        };
      }
    }
  }

  preload() {
    this.load.image('blank', 'images/blank.gif');
    this.load.image('flag', 'images/bombflagged.gif');
    return this.load.plugin('rexpinchplugin', 'lib/rexpinchplugin.min.js', true);
  }

  create() {
    var camera, i, j, k, l, pinch, ref, ref1;
    for (i = k = 0, ref = this.width; (0 <= ref ? k < ref : k > ref); i = 0 <= ref ? ++k : --k) {
      for (j = l = 0, ref1 = this.height; (0 <= ref1 ? l < ref1 : l > ref1); j = 0 <= ref1 ? ++l : --l) {
        this.grid[i][j].sprite = this.add.image(i * 16, j * 16, 'blank');
        this.grid[i][j].sprite.setOrigin(0, 0);
      }
    }
    camera = this.cameras.main;
    pinch = this.plugins.get('rexpinchplugin').add(this);
    // This is really the "pinch" threshold
    // pinch.setDragThreshold(50)
    pinch.on('drag1start', () => {
      return this.dragAccumulator = new Phaser.Math.Vector2(0, 0);
    });
    pinch.on('drag1end', () => {
      var x, y;
      if (!this.dragged) {
        x = this.game.input.activePointer.worldX;
        y = this.game.input.activePointer.worldY;
        this.tap(x, y);
      }
      return this.dragged = false;
    });
    pinch.on('drag1', (pinch) => {
      if (this.dragAccumulator != null) {
        this.dragAccumulator.add(pinch.drag1Vector);
        if (this.dragAccumulator.length() > DRAG_THRESHOLD_PIXELS) {
          camera.scrollX -= this.dragAccumulator.x / camera.zoom;
          camera.scrollY -= this.dragAccumulator.y / camera.zoom;
          this.dragAccumulator = null;
          return this.dragged = true;
        }
      } else {
        camera.scrollX -= pinch.drag1Vector.x / camera.zoom;
        camera.scrollY -= pinch.drag1Vector.y / camera.zoom;
        return this.dragged = true;
      }
    });
    return pinch.on('pinch', (pinch) => {
      var scaleFactor;
      scaleFactor = pinch.scaleFactor;
      camera.zoom *= scaleFactor;
      this.dragAccumulator = null;
      return this.dragged = true;
    });
  }

  tap(worldX, worldY) {
    var hud, x, y;
    hud = this.scene.get('hud');
    hud.debugText.text = `Tapped: ${worldX.toFixed(1)} ${worldY.toFixed(1)}`;
    if ((worldX >= 0) && (worldX < (this.width * 16)) && (worldY >= 0) && (worldY < (this.height * 16))) {
      x = Math.floor(worldX / 16);
      y = Math.floor(worldY / 16);
      this.grid[x][y].bomb = !this.grid[x][y].bomb;
      if (this.grid[x][y].bomb) {
        return this.grid[x][y].sprite.setTexture('flag');
      } else {
        return this.grid[x][y].sprite.setTexture('blank');
      }
    }
  }

  update() {}

};

BGMHudScene = class BGMHudScene extends Phaser.Scene {
  constructor() {
    super();
    Phaser.Scene.call(this, {
      key: 'hud',
      active: true
    });
  }

  preload() {}

  create() {
    return this.debugText = this.add.text(0, 0, 'Tap somewhere!');
  }

};

init = function() {
  var config, game;
  console.log("Bad Guy Minesweeper: init()");
  config = {
    type: Phaser.AUTO,
    width: document.documentElement.clientWidth,
    height: document.documentElement.clientHeight,
    backgroundColor: '#2d2d2d',
    parent: 'screen',
    scene: [BGMGameScene, BGMHudScene]
  };
  return game = new Phaser.Game(config);
};

window.addEventListener('load', function(e) {
  return init();
}, false);


},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
