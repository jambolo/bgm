(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
var BGMGameScene, TouchInterpreter;

TouchInterpreter = require('./TouchInterpreter');

BGMGameScene = class BGMGameScene extends Phaser.Scene {
  constructor() {
    var i, j, k, l, ref, ref1;
    super();
    Phaser.Scene.call(this, {
      key: 'game',
      active: true
    });
    this.width = 60;
    this.height = 30;
    this.grid = new Array(this.width);
    for (i = k = 0, ref = this.width; (0 <= ref ? k < ref : k > ref); i = 0 <= ref ? ++k : --k) {
      this.grid[i] = new Array(this.height);
      for (j = l = 0, ref1 = this.height; (0 <= ref1 ? l < ref1 : l > ref1); j = 0 <= ref1 ? ++l : --l) {
        this.grid[i][j] = {
          bomb: false,
          sprite: null
        };
      }
    }
    this.touch = new TouchInterpreter();
  }

  preload() {
    this.load.image('blank', 'images/blank.gif');
    return this.load.image('flag', 'images/bombflagged.gif');
  }

  create() {
    var i, j, k, l, ref, ref1;
    for (i = k = 0, ref = this.width; (0 <= ref ? k < ref : k > ref); i = 0 <= ref ? ++k : --k) {
      for (j = l = 0, ref1 = this.height; (0 <= ref1 ? l < ref1 : l > ref1); j = 0 <= ref1 ? ++l : --l) {
        this.grid[i][j].sprite = this.add.image(i * 16, j * 16, 'blank');
        this.grid[i][j].sprite.setOrigin(0, 0);
        this.grid[0][0].sprite.setTexture('flag');
      }
    }
    return this.touch.create(this, this.cameras.main);
  }

  update() {}

  setMagnifyingGlass(x, y, alpha) {
    return this.scene.get('hud').setMagnifyingGlass(x, y, alpha);
  }

  tap(worldX, worldY) {
    var x, y;
    this.scene.get('hud').debugText.text = `Tapped: ${worldX.toFixed(1)} ${worldY.toFixed(1)}`;
    if ((worldX >= 0) && (worldX < (this.width * 16)) && (worldY >= 0) && (worldY < (this.height * 16))) {
      x = Math.floor(worldX / 16);
      y = Math.floor(worldY / 16);
      this.grid[x][y].bomb = !this.grid[x][y].bomb;
      if (this.grid[x][y].bomb) {
        return this.grid[x][y].sprite.setTexture('flag');
      } else {
        return this.grid[x][y].sprite.setTexture('blank');
      }
    }
  }

};

module.exports = BGMGameScene;


},{"./TouchInterpreter":3}],2:[function(require,module,exports){
var BGMHudScene;

BGMHudScene = class BGMHudScene extends Phaser.Scene {
  constructor() {
    super();
    Phaser.Scene.call(this, {
      key: 'hud',
      active: true
    });
  }

  preload() {
    return this.load.image('glass', 'images/glass.gif');
  }

  create() {
    this.debugText = this.add.text(0, 0, 'Tap somewhere!');
    this.glass = this.add.image(50, 50, 'glass');
    this.glass.setOrigin(0.6, 0.3); // roughly the middle of the magnifying glass
    return this.glass.alpha = 0;
  }

  update() {}

  setMagnifyingGlass(x, y, alpha) {
    this.glass.x = x;
    this.glass.y = y;
    return this.glass.alpha = alpha;
  }

};

module.exports = BGMHudScene;


},{}],3:[function(require,module,exports){
var DOUBLE_CLICK_MS, ENGAGE_DRAG_DISTANCE, TouchInterpreter;

ENGAGE_DRAG_DISTANCE = 10;

DOUBLE_CLICK_MS = 400;

TouchInterpreter = class TouchInterpreter {
  constructor() {
    this.tracked = [];
    this.dragX = 0;
    this.dragY = 0;
    this.dragging = false;
    this.doubleClickTime = null;
    this.pinchAnchor = null;
    this.pinchAnchorWorld = null;
  }

  create(scene, camera) {
    this.scene = scene;
    this.camera = camera;
    this.camera.zoom = 1;
    this.scene.input.addPointer(1);
    this.scene.input.on('pointerdown', (pointer) => {
      var clickDelta, now;
      if (this.tracked.length === 0) {
        this.dragging = false;
      }
      // console.log "new pointer #{pointer.id}"
      this.tracked.push({
        id: pointer.id,
        pos: pointer.position.clone()
      });
      if (this.tracked.length === 1) {
        this.setDragPoint();
      }
      if (this.tracked.length === 2) {
        // We just added a second touch spot. Calculate the anchor for pinching now
        this.calcPinchAnchor();
      }
      if (this.tracked.length > 1) {
        this.dragging = true;
        return this.doubleClickTime = null;
      } else if (!this.dragging) {
        now = new Date().getTime();
        if (this.doubleClickTime !== null) {
          // second click
          clickDelta = now - this.doubleClickTime;
          if (clickDelta < DOUBLE_CLICK_MS) {
            this.doubleClickTime = null;
            return;
          }
        }
        // console.log "DOUBLE TAP #{@tracked[0].pos.x} #{@tracked[0].pos.y}"
        return this.doubleClickTime = now;
      }
    });
    this.scene.input.on('pointermove', (pointer) => {
      var currDistance, deltaDistance, dragDistance, dx, dy, halfH, halfW, i, index, j, newZoom, offsetX, offsetY, prevDistance, prevX, prevY, ref;
      prevDistance = 0;
      if (this.tracked.length >= 2) {
        prevDistance = this.calcDistance(this.tracked[0].pos.x, this.tracked[0].pos.y, this.tracked[1].pos.x, this.tracked[1].pos.y);
      }
      if (this.tracked.length === 1) {
        prevX = this.tracked[0].pos.x;
        prevY = this.tracked[0].pos.y;
      }
      index = -1;
      for (i = j = 0, ref = this.tracked.length; (0 <= ref ? j < ref : j > ref); i = 0 <= ref ? ++j : --j) {
        if (this.tracked[i].id === pointer.id) {
          index = i;
          break;
        }
      }
      if (index !== -1) {
        // console.log "updating touch #{id}, tracking #{@tracked.length} touches"
        this.tracked[index].pos = pointer.position.clone();
      }
      if (this.tracked.length === 1) {
        // single touch, consider dragging
        dragDistance = this.calcDistance(this.dragX, this.dragY, this.tracked[0].pos.x, this.tracked[0].pos.y);
        if (this.dragging || (dragDistance > ENGAGE_DRAG_DISTANCE)) {
          this.dragging = true;
          if (dragDistance > 0.5) {
            dx = this.tracked[0].pos.x - this.dragX;
            dy = this.tracked[0].pos.y - this.dragY;
            // console.log "single drag: #{dx}, #{dy}"
            this.camera.scrollX -= dx / this.camera.zoom;
            this.camera.scrollY -= dy / this.camera.zoom;
          }
          // console.log "scroll #{@camera.scrollX} #{@camera.zoom} #{@camera.width}"
          this.setDragPoint();
        }
      } else if (this.tracked.length >= 2) {
        // at least two fingers present, check for pinch/zoom
        currDistance = this.calcDistance(this.tracked[0].pos.x, this.tracked[0].pos.y, this.tracked[1].pos.x, this.tracked[1].pos.y);
        deltaDistance = currDistance - prevDistance;
        if (deltaDistance !== 0) {
          newZoom = this.camera.zoom * (1 + (deltaDistance * 4 / this.camera.width));
          if (newZoom < 0.1) {
            newZoom = 0.1;
          }
          if (newZoom > 5) {
            newZoom = 5;
          }
          this.camera.zoom = newZoom;
          halfW = this.camera.width / 2;
          halfH = this.camera.height / 2;
          offsetX = (this.pinchAnchor.x - halfW) / newZoom;
          offsetY = (this.pinchAnchor.y - halfH) / newZoom;
          this.camera.scrollX = this.pinchAnchorWorld.x - halfW - offsetX;
          this.camera.scrollY = this.pinchAnchorWorld.y - halfH - offsetY;
        }
      }
    });
    return this.scene.input.on('pointerup', (pointer) => {
      var i, index, j, ref, worldPos;
      if (this.tracked.length === 1) {
        if (!this.dragging) {
          worldPos = this.camera.getWorldPoint(this.tracked[0].pos.x, this.tracked[0].pos.y);
          // console.log "TAP #{worldPos.x} #{worldPos.y} #{@camera.scrollX} #{@camera.scrollY} #{@camera.zoom}"
          this.scene.tap(worldPos.x, worldPos.y);
        }
      }
      index = -1;
      for (i = j = 0, ref = this.tracked.length; (0 <= ref ? j < ref : j > ref); i = 0 <= ref ? ++j : --j) {
        if (this.tracked[i].id === pointer.id) {
          index = i;
          break;
        }
      }
      if (index !== -1) {
        this.tracked.splice(index, 1);
        if (this.tracked.length === 1) {
          this.setDragPoint();
        }
        if (index < 2) {
          // We just forgot one of our pinch touches. Pick a new anchor spot.
          this.calcPinchAnchor();
        }
      }
      this.scene.setMagnifyingGlass(0, 0, 0);
    });
  }

  setDragPoint() {
    this.dragX = this.tracked[0].pos.x;
    return this.dragY = this.tracked[0].pos.y;
  }

  calcPinchAnchor() {
    var pinchX, pinchY;
    if (this.tracked.length >= 2) {
      pinchX = Math.floor((this.tracked[0].pos.x + this.tracked[1].pos.x) / 2);
      pinchY = Math.floor((this.tracked[0].pos.y + this.tracked[1].pos.y) / 2);
      this.pinchAnchor = {
        x: pinchX,
        y: pinchY
      };
      this.pinchAnchorWorld = this.camera.getWorldPoint(pinchX, pinchY); // { x: pinchX, y: pinchY }
      // console.log "pinchAnchor #{@pinchAnchor.x} #{@pinchAnchor.y}"
      return this.scene.setMagnifyingGlass(this.pinchAnchor.x, this.pinchAnchor.y, 1);
    }
  }

  calcDistance(x1, y1, x2, y2) {
    var dx, dy;
    dx = x2 - x1;
    dy = y2 - y1;
    return Math.sqrt(dx * dx + dy * dy);
  }

};

module.exports = TouchInterpreter;


},{}],4:[function(require,module,exports){
var BGMGameScene, BGMHudScene, init;

BGMGameScene = require('./BGMGameScene');

BGMHudScene = require('./BGMHudScene');

init = function() {
  var config, game;
  console.log("Bad Guy Minesweeper: init()");
  config = {
    type: Phaser.AUTO,
    width: document.documentElement.clientWidth,
    height: document.documentElement.clientHeight,
    backgroundColor: '#2d2d2d',
    parent: 'screen',
    input: {
      activePointers: 2
    },
    scene: [BGMGameScene, BGMHudScene]
  };
  return game = new Phaser.Game(config);
};

window.addEventListener('load', function(e) {
  return init();
}, false);


},{"./BGMGameScene":1,"./BGMHudScene":2}]},{},[4])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvQkdNR2FtZVNjZW5lLmNvZmZlZSIsInNyYy9CR01IdWRTY2VuZS5jb2ZmZWUiLCJzcmMvVG91Y2hJbnRlcnByZXRlci5jb2ZmZWUiLCJzcmMvbWFpbi5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQSxJQUFBLFlBQUEsRUFBQTs7QUFBQSxnQkFBQSxHQUFtQixPQUFBLENBQVEsb0JBQVI7O0FBRWIsZUFBTixNQUFBLGFBQUEsUUFBMkIsTUFBTSxDQUFDLE1BQWxDO0VBQ0UsV0FBYSxDQUFBLENBQUE7QUFDZixRQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUE7U0FBSSxDQUFBO0lBQ0EsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFiLENBQWtCLElBQWxCLEVBQXdCO01BQUUsR0FBQSxFQUFLLE1BQVA7TUFBZSxNQUFBLEVBQVE7SUFBdkIsQ0FBeEI7SUFFQSxJQUFDLENBQUEsS0FBRCxHQUFTO0lBQ1QsSUFBQyxDQUFBLE1BQUQsR0FBVTtJQUVWLElBQUMsQ0FBQSxJQUFELEdBQVEsSUFBSSxLQUFKLENBQVUsSUFBQyxDQUFBLEtBQVg7SUFDUixLQUFTLHFGQUFUO01BQ0UsSUFBQyxDQUFBLElBQUksQ0FBQyxDQUFELENBQUwsR0FBVyxJQUFJLEtBQUosQ0FBVSxJQUFDLENBQUEsTUFBWDtNQUNYLEtBQVMsMkZBQVQ7UUFDRSxJQUFDLENBQUEsSUFBSSxDQUFDLENBQUQsQ0FBRyxDQUFDLENBQUQsQ0FBUixHQUNFO1VBQUEsSUFBQSxFQUFNLEtBQU47VUFDQSxNQUFBLEVBQVE7UUFEUjtNQUZKO0lBRkY7SUFPQSxJQUFDLENBQUEsS0FBRCxHQUFTLElBQUksZ0JBQUosQ0FBQTtFQWZFOztFQWlCYixPQUFTLENBQUEsQ0FBQTtJQUNQLElBQUMsQ0FBQSxJQUFJLENBQUMsS0FBTixDQUFZLE9BQVosRUFBcUIs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LGdCQUFQLENBQXdCLE1BQXhCLEVBQWdDLFFBQUEsQ0FBQyxDQUFELENBQUE7U0FDNUIsSUFBQSxDQUFBO0FBRDRCLENBQWhDLEVBRUUsS0FGRiIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihlLG4sdCl7ZnVuY3Rpb24gbyhpLGYpe2lmKCFuW2ldKXtpZighZVtpXSl7dmFyIGM9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZiYmYylyZXR1cm4gYyhpLCEwKTtpZih1KXJldHVybiB1KGksITApO3ZhciBhPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIraStcIidcIik7dGhyb3cgYS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGF9dmFyIHA9bltpXT17ZXhwb3J0czp7fX07ZVtpXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihyKXt2YXIgbj1lW2ldWzFdW3JdO3JldHVybiBvKG58fHIpfSxwLHAuZXhwb3J0cyxyLGUsbix0KX1yZXR1cm4gbltpXS5leHBvcnRzfWZvcih2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGk9MDtpPHQubGVuZ3RoO2krKylvKHRbaV0pO3JldHVybiBvfXJldHVybiByfSkoKSIsIlRvdWNoSW50ZXJwcmV0ZXIgPSByZXF1aXJlICcuL1RvdWNoSW50ZXJwcmV0ZXInXHJcblxyXG5jbGFzcyBCR01HYW1lU2NlbmUgZXh0ZW5kcyBQaGFzZXIuU2NlbmVcclxuICBjb25zdHJ1Y3RvcjogLT5cclxuICAgIHN1cGVyKClcclxuICAgIFBoYXNlci5TY2VuZS5jYWxsKHRoaXMsIHsga2V5OiAnZ2FtZScsIGFjdGl2ZTogdHJ1ZSB9KTtcclxuXHJcbiAgICBAd2lkdGggPSA2MFxyXG4gICAgQGhlaWdodCA9IDMwXHJcblxyXG4gICAgQGdyaWQgPSBuZXcgQXJyYXkoQHdpZHRoKVxyXG4gICAgZm9yIGkgaW4gWzAuLi5Ad2lkdGhdXHJcbiAgICAgIEBncmlkW2ldID0gbmV3IEFycmF5KEBoZWlnaHQpXHJcbiAgICAgIGZvciBqIGluIFswLi4uQGhlaWdodF1cclxuICAgICAgICBAZ3JpZFtpXVtqXSA9XHJcbiAgICAgICAgICBib21iOiBmYWxzZVxyXG4gICAgICAgICAgc3ByaXRlOiBudWxsXHJcblxyXG4gICAgQHRvdWNoID0gbmV3IFRvdWNoSW50ZXJwcmV0ZXJcclxuXHJcbiAgcHJlbG9hZDogLT5cclxuICAgIEBsb2FkLmltYWdlKCdibGFuaycsICdpbWFnZXMvYmxhbmsuZ2lmJylcclxuICAgIEBsb2FkLmltYWdlKCdmbGFnJywgJ2ltYWdlcy9ib21iZmxhZ2dlZC5naWYnKVxyXG5cclxuICBjcmVhdGU6IC0+XHJcbiAgICBmb3IgaSBpbiBbMC4uLkB3aWR0aF1cclxuICAgICAgZm9yIGogaW4gWzAuLi5AaGVpZ2h0XVxyXG4gICAgICAgIEBncmlkW2ldW2pdLnNwcml0ZSA9IEBhZGQuaW1hZ2UoaSAqIDE2LCBqICogMTYsICdibGFuaycpXHJcbiAgICAgICAgQGdyaWRbaV1bal0uc3ByaXRlLnNldE9yaWdpbigwLCAwKVxyXG5cclxuICAgICAgICBAZ3JpZFswXVswXS5zcHJpdGUuc2V0VGV4dHVyZSgnZmxhZycpXHJcblxyXG4gICAgQHRvdWNoLmNyZWF0ZSh0aGlzLCBAY2FtZXJhcy5tYWluKVxyXG5cclxuICB1cGRhdGU6IC0+XHJcblxyXG4gIHNldE1hZ25pZnlpbmdHbGFzczogKHgsIHksIGFscGhhKSAtPlxyXG4gICAgQHNjZW5lLmdldCgnaHVkJykuc2V0TWFnbmlmeWluZ0dsYXNzKHgsIHksIGFscGhhKVxyXG5cclxuICB0YXA6ICh3b3JsZFgsIHdvcmxkWSkgLT5cclxuICAgIEBzY2VuZS5nZXQoJ2h1ZCcpLmRlYnVnVGV4dC50ZXh0ID0gXCJUYXBwZWQ6ICN7d29ybGRYLnRvRml4ZWQoMSl9ICN7d29ybGRZLnRvRml4ZWQoMSl9XCJcclxuXHJcbiAgICBpZiAod29ybGRYID49IDApIGFuZCAod29ybGRYIDwgKEB3aWR0aCAqIDE2KSkgYW5kICh3b3JsZFkgPj0gMCkgYW5kICh3b3JsZFkgPCAoQGhlaWdodCAqIDE2KSlcclxuICAgICAgeCA9IE1hdGguZmxvb3Iod29ybGRYIC8gMTYpXHJcbiAgICAgIHkgPSBNYXRoLmZsb29yKHdvcmxkWSAvIDE2KVxyXG4gICAgICBAZ3JpZFt4XVt5XS5ib21iID0gIUBncmlkW3hdW3ldLmJvbWJcclxuICAgICAgaWYgQGdyaWRbeF1beV0uYm9tYlxyXG4gICAgICAgIEBncmlkW3hdW3ldLnNwcml0ZS5zZXRUZXh0dXJlKCdmbGFnJylcclxuICAgICAgZWxzZVxyXG4gICAgICAgIEBncmlkW3hdW3ldLnNwcml0ZS5zZXRUZXh0dXJlKCdibGFuaycpXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IEJHTUdhbWVTY2VuZVxyXG4iLCJjbGFzcyBCR01IdWRTY2VuZSBleHRlbmRzIFBoYXNlci5TY2VuZVxyXG4gIGNvbnN0cnVjdG9yOiAtPlxyXG4gICAgc3VwZXIoKVxyXG4gICAgUGhhc2VyLlNjZW5lLmNhbGwodGhpcywgeyBrZXk6ICdodWQnLCBhY3RpdmU6IHRydWUgfSk7XHJcblxyXG4gIHByZWxvYWQ6IC0+XHJcbiAgICBAbG9hZC5pbWFnZSgnZ2xhc3MnLCAnaW1hZ2VzL2dsYXNzLmdpZicpXHJcblxyXG4gIGNyZWF0ZTogLT5cclxuICAgIEBkZWJ1Z1RleHQgPSBAYWRkLnRleHQoMCwgMCwgJ1RhcCBzb21ld2hlcmUhJylcclxuICAgIEBnbGFzcyA9IEBhZGQuaW1hZ2UoNTAsIDUwLCAnZ2xhc3MnKVxyXG4gICAgQGdsYXNzLnNldE9yaWdpbigwLjYsIDAuMykgIyByb3VnaGx5IHRoZSBtaWRkbGUgb2YgdGhlIG1hZ25pZnlpbmcgZ2xhc3NcclxuICAgIEBnbGFzcy5hbHBoYSA9IDBcclxuXHJcbiAgdXBkYXRlOiAtPlxyXG5cclxuICBzZXRNYWduaWZ5aW5nR2xhc3M6ICh4LCB5LCBhbHBoYSkgLT5cclxuICAgIEBnbGFzcy54ID0geFxyXG4gICAgQGdsYXNzLnkgPSB5XHJcbiAgICBAZ2xhc3MuYWxwaGEgPSBhbHBoYVxyXG5cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gQkdNSHVkU2NlbmVcclxuIiwiRU5HQUdFX0RSQUdfRElTVEFOQ0UgPSAxMFxyXG5ET1VCTEVfQ0xJQ0tfTVMgPSA0MDBcclxuXHJcbmNsYXNzIFRvdWNoSW50ZXJwcmV0ZXJcclxuICBjb25zdHJ1Y3RvcjogLT5cclxuICAgIEB0cmFja2VkID0gW11cclxuICAgIEBkcmFnWCA9IDBcclxuICAgIEBkcmFnWSA9IDBcclxuICAgIEBkcmFnZ2luZyA9IGZhbHNlXHJcbiAgICBAZG91YmxlQ2xpY2tUaW1lID0gbnVsbFxyXG4gICAgQHBpbmNoQW5jaG9yID0gbnVsbFxyXG4gICAgQHBpbmNoQW5jaG9yV29ybGQgPSBudWxsXHJcblxyXG4gIGNyZWF0ZTogKEBzY2VuZSwgQGNhbWVyYSkgLT5cclxuXHJcbiAgICBAY2FtZXJhLnpvb20gPSAxXHJcblxyXG4gICAgQHNjZW5lLmlucHV0LmFkZFBvaW50ZXIoMSlcclxuXHJcbiAgICBAc2NlbmUuaW5wdXQub24gJ3BvaW50ZXJkb3duJywgKHBvaW50ZXIpID0+XHJcbiAgICAgIGlmIEB0cmFja2VkLmxlbmd0aCA9PSAwXHJcbiAgICAgICAgQGRyYWdnaW5nID0gZmFsc2VcclxuXHJcbiAgICAgICMgY29uc29sZS5sb2cgXCJuZXcgcG9pbnRlciAje3BvaW50ZXIuaWR9XCJcclxuICAgICAgQHRyYWNrZWQucHVzaCB7XHJcbiAgICAgICAgaWQ6IHBvaW50ZXIuaWRcclxuICAgICAgICBwb3M6IHBvaW50ZXIucG9zaXRpb24uY2xvbmUoKVxyXG4gICAgICB9XHJcbiAgICAgIGlmIEB0cmFja2VkLmxlbmd0aCA9PSAxXHJcbiAgICAgICAgQHNldERyYWdQb2ludCgpXHJcbiAgICAgIGlmIEB0cmFja2VkLmxlbmd0aCA9PSAyXHJcbiAgICAgICAgIyBXZSBqdXN0IGFkZGVkIGEgc2Vjb25kIHRvdWNoIHNwb3QuIENhbGN1bGF0ZSB0aGUgYW5jaG9yIGZvciBwaW5jaGluZyBub3dcclxuICAgICAgICBAY2FsY1BpbmNoQW5jaG9yKClcclxuXHJcbiAgICAgIGlmIEB0cmFja2VkLmxlbmd0aCA+IDFcclxuICAgICAgICBAZHJhZ2dpbmcgPSB0cnVlXHJcbiAgICAgICAgQGRvdWJsZUNsaWNrVGltZSA9IG51bGxcclxuICAgICAgZWxzZSBpZiBub3QgQGRyYWdnaW5nXHJcbiAgICAgICAgbm93ID0gbmV3IERhdGUoKS5nZXRUaW1lKClcclxuICAgICAgICBpZiBAZG91YmxlQ2xpY2tUaW1lICE9IG51bGxcclxuICAgICAgICAgICMgc2Vjb25kIGNsaWNrXHJcbiAgICAgICAgICBjbGlja0RlbHRhID0gbm93IC0gQGRvdWJsZUNsaWNrVGltZVxyXG4gICAgICAgICAgaWYgY2xpY2tEZWx0YSA8IERPVUJMRV9DTElDS19NU1xyXG4gICAgICAgICAgICBAZG91YmxlQ2xpY2tUaW1lID0gbnVsbFxyXG4gICAgICAgICAgICAjIGNvbnNvbGUubG9nIFwiRE9VQkxFIFRBUCAje0B0cmFja2VkWzBdLnBvcy54fSAje0B0cmFja2VkWzBdLnBvcy55fVwiXHJcbiAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgIEBkb3VibGVDbGlja1RpbWUgPSBub3dcclxuXHJcbiAgICBAc2NlbmUuaW5wdXQub24gJ3BvaW50ZXJtb3ZlJywgKHBvaW50ZXIpID0+XHJcbiAgICAgIHByZXZEaXN0YW5jZSA9IDBcclxuICAgICAgaWYgQHRyYWNrZWQubGVuZ3RoID49IDJcclxuICAgICAgICBwcmV2RGlzdGFuY2UgPSBAY2FsY0Rpc3RhbmNlKEB0cmFja2VkWzBdLnBvcy54LCBAdHJhY2tlZFswXS5wb3MueSwgQHRyYWNrZWRbMV0ucG9zLngsIEB0cmFja2VkWzFdLnBvcy55KVxyXG4gICAgICBpZiBAdHJhY2tlZC5sZW5ndGggPT0gMVxyXG4gICAgICAgIHByZXZYID0gQHRyYWNrZWRbMF0ucG9zLnhcclxuICAgICAgICBwcmV2WSA9IEB0cmFja2VkWzBdLnBvcy55XHJcblxyXG4gICAgICBpbmRleCA9IC0xXHJcbiAgICAgIGZvciBpIGluIFswLi4uQHRyYWNrZWQubGVuZ3RoXVxyXG4gICAgICAgIGlmIEB0cmFja2VkW2ldLmlkID09IHBvaW50ZXIuaWRcclxuICAgICAgICAgIGluZGV4ID0gaVxyXG4gICAgICAgICAgYnJlYWtcclxuICAgICAgaWYgaW5kZXggIT0gLTFcclxuICAgICAgICAjIGNvbnNvbGUubG9nIFwidXBkYXRpbmcgdG91Y2ggI3tpZH0sIHRyYWNraW5nICN7QHRyYWNrZWQubGVuZ3RofSB0b3VjaGVzXCJcclxuICAgICAgICBAdHJhY2tlZFtpbmRleF0ucG9zID0gcG9pbnRlci5wb3NpdGlvbi5jbG9uZSgpXHJcblxyXG4gICAgICBpZiBAdHJhY2tlZC5sZW5ndGggPT0gMVxyXG4gICAgICAgICMgc2luZ2xlIHRvdWNoLCBjb25zaWRlciBkcmFnZ2luZ1xyXG4gICAgICAgIGRyYWdEaXN0YW5jZSA9IEBjYWxjRGlzdGFuY2UgQGRyYWdYLCBAZHJhZ1ksIEB0cmFja2VkWzBdLnBvcy54LCBAdHJhY2tlZFswXS5wb3MueVxyXG4gICAgICAgIGlmIEBkcmFnZ2luZyBvciAoZHJhZ0Rpc3RhbmNlID4gRU5HQUdFX0RSQUdfRElTVEFOQ0UpXHJcbiAgICAgICAgICBAZHJhZ2dpbmcgPSB0cnVlXHJcbiAgICAgICAgICBpZiBkcmFnRGlzdGFuY2UgPiAwLjVcclxuICAgICAgICAgICAgZHggPSBAdHJhY2tlZFswXS5wb3MueCAtIEBkcmFnWFxyXG4gICAgICAgICAgICBkeSA9IEB0cmFja2VkWzBdLnBvcy55IC0gQGRyYWdZXHJcbiAgICAgICAgICAgICMgY29uc29sZS5sb2cgXCJzaW5nbGUgZHJhZzogI3tkeH0sICN7ZHl9XCJcclxuICAgICAgICAgICAgQGNhbWVyYS5zY3JvbGxYIC09IGR4IC8gQGNhbWVyYS56b29tXHJcbiAgICAgICAgICAgIEBjYW1lcmEuc2Nyb2xsWSAtPSBkeSAvIEBjYW1lcmEuem9vbVxyXG5cclxuICAgICAgICAgICAgIyBjb25zb2xlLmxvZyBcInNjcm9sbCAje0BjYW1lcmEuc2Nyb2xsWH0gI3tAY2FtZXJhLnpvb219ICN7QGNhbWVyYS53aWR0aH1cIlxyXG4gICAgICAgICAgQHNldERyYWdQb2ludCgpXHJcblxyXG4gICAgICBlbHNlIGlmIEB0cmFja2VkLmxlbmd0aCA+PSAyXHJcbiAgICAgICAgIyBhdCBsZWFzdCB0d28gZmluZ2VycyBwcmVzZW50LCBjaGVjayBmb3IgcGluY2gvem9vbVxyXG4gICAgICAgIGN1cnJEaXN0YW5jZSA9IEBjYWxjRGlzdGFuY2UoQHRyYWNrZWRbMF0ucG9zLngsIEB0cmFja2VkWzBdLnBvcy55LCBAdHJhY2tlZFsxXS5wb3MueCwgQHRyYWNrZWRbMV0ucG9zLnkpXHJcbiAgICAgICAgZGVsdGFEaXN0YW5jZSA9IGN1cnJEaXN0YW5jZSAtIHByZXZEaXN0YW5jZVxyXG4gICAgICAgIGlmIGRlbHRhRGlzdGFuY2UgIT0gMFxyXG4gICAgICAgICAgbmV3Wm9vbSA9IEBjYW1lcmEuem9vbSAqICgxICsgKGRlbHRhRGlzdGFuY2UgKiA0IC8gQGNhbWVyYS53aWR0aCkpXHJcbiAgICAgICAgICBpZiBuZXdab29tIDwgMC4xXHJcbiAgICAgICAgICAgIG5ld1pvb20gPSAwLjFcclxuICAgICAgICAgIGlmIG5ld1pvb20gPiA1XHJcbiAgICAgICAgICAgIG5ld1pvb20gPSA1XHJcbiAgICAgICAgICBAY2FtZXJhLnpvb20gPSBuZXdab29tXHJcblxyXG4gICAgICAgICAgaGFsZlcgPSAoQGNhbWVyYS53aWR0aCAvIDIpXHJcbiAgICAgICAgICBoYWxmSCA9IChAY2FtZXJhLmhlaWdodCAvIDIpXHJcbiAgICAgICAgICBvZmZzZXRYID0gKEBwaW5jaEFuY2hvci54IC0gaGFsZlcpIC8gbmV3Wm9vbVxyXG4gICAgICAgICAgb2Zmc2V0WSA9IChAcGluY2hBbmNob3IueSAtIGhhbGZIKSAvIG5ld1pvb21cclxuICAgICAgICAgIEBjYW1lcmEuc2Nyb2xsWCA9IEBwaW5jaEFuY2hvcldvcmxkLnggLSBoYWxmVyAtIG9mZnNldFhcclxuICAgICAgICAgIEBjYW1lcmEuc2Nyb2xsWSA9IEBwaW5jaEFuY2hvcldvcmxkLnkgLSBoYWxmSCAtIG9mZnNldFlcclxuICAgICAgcmV0dXJuXHJcblxyXG4gICAgQHNjZW5lLmlucHV0Lm9uICdwb2ludGVydXAnLCAocG9pbnRlcikgPT5cclxuICAgICAgaWYgQHRyYWNrZWQubGVuZ3RoID09IDFcclxuICAgICAgICBpZiBub3QgQGRyYWdnaW5nXHJcbiAgICAgICAgICB3b3JsZFBvcyA9IEBjYW1lcmEuZ2V0V29ybGRQb2ludChAdHJhY2tlZFswXS5wb3MueCwgQHRyYWNrZWRbMF0ucG9zLnkpXHJcbiAgICAgICAgICAjIGNvbnNvbGUubG9nIFwiVEFQICN7d29ybGRQb3MueH0gI3t3b3JsZFBvcy55fSAje0BjYW1lcmEuc2Nyb2xsWH0gI3tAY2FtZXJhLnNjcm9sbFl9ICN7QGNhbWVyYS56b29tfVwiXHJcbiAgICAgICAgICBAc2NlbmUudGFwKHdvcmxkUG9zLngsIHdvcmxkUG9zLnkpXHJcblxyXG4gICAgICBpbmRleCA9IC0xXHJcbiAgICAgIGZvciBpIGluIFswLi4uQHRyYWNrZWQubGVuZ3RoXVxyXG4gICAgICAgIGlmIEB0cmFja2VkW2ldLmlkID09IHBvaW50ZXIuaWRcclxuICAgICAgICAgIGluZGV4ID0gaVxyXG4gICAgICAgICAgYnJlYWtcclxuICAgICAgaWYgaW5kZXggIT0gLTFcclxuICAgICAgICBAdHJhY2tlZC5zcGxpY2UoaW5kZXgsIDEpXHJcbiAgICAgICAgaWYgQHRyYWNrZWQubGVuZ3RoID09IDFcclxuICAgICAgICAgIEBzZXREcmFnUG9pbnQoKVxyXG5cclxuICAgICAgICBpZiBpbmRleCA8IDJcclxuICAgICAgICAgICMgV2UganVzdCBmb3Jnb3Qgb25lIG9mIG91ciBwaW5jaCB0b3VjaGVzLiBQaWNrIGEgbmV3IGFuY2hvciBzcG90LlxyXG4gICAgICAgICAgQGNhbGNQaW5jaEFuY2hvcigpXHJcblxyXG4gICAgICBAc2NlbmUuc2V0TWFnbmlmeWluZ0dsYXNzKDAsIDAsIDApXHJcbiAgICAgIHJldHVyblxyXG5cclxuICBzZXREcmFnUG9pbnQ6IC0+XHJcbiAgICBAZHJhZ1ggPSBAdHJhY2tlZFswXS5wb3MueFxyXG4gICAgQGRyYWdZID0gQHRyYWNrZWRbMF0ucG9zLnlcclxuXHJcbiAgY2FsY1BpbmNoQW5jaG9yOiAtPlxyXG4gICAgaWYgQHRyYWNrZWQubGVuZ3RoID49IDJcclxuICAgICAgcGluY2hYID0gTWF0aC5mbG9vcigoQHRyYWNrZWRbMF0ucG9zLnggKyBAdHJhY2tlZFsxXS5wb3MueCkgLyAyKVxyXG4gICAgICBwaW5jaFkgPSBNYXRoLmZsb29yKChAdHJhY2tlZFswXS5wb3MueSArIEB0cmFja2VkWzFdLnBvcy55KSAvIDIpXHJcbiAgICAgIEBwaW5jaEFuY2hvciA9IHt4OiBwaW5jaFgsIHk6IHBpbmNoWSB9XHJcbiAgICAgIEBwaW5jaEFuY2hvcldvcmxkID0gQGNhbWVyYS5nZXRXb3JsZFBvaW50KHBpbmNoWCwgcGluY2hZKSAjIHsgeDogcGluY2hYLCB5OiBwaW5jaFkgfVxyXG4gICAgICAjIGNvbnNvbGUubG9nIFwicGluY2hBbmNob3IgI3tAcGluY2hBbmNob3IueH0gI3tAcGluY2hBbmNob3IueX1cIlxyXG5cclxuICAgICAgQHNjZW5lLnNldE1hZ25pZnlpbmdHbGFzcyhAcGluY2hBbmNob3IueCwgQHBpbmNoQW5jaG9yLnksIDEpXHJcblxyXG4gIGNhbGNEaXN0YW5jZTogKHgxLCB5MSwgeDIsIHkyKSAtPlxyXG4gICAgZHggPSB4MiAtIHgxXHJcbiAgICBkeSA9IHkyIC0geTFcclxuICAgIHJldHVybiBNYXRoLnNxcnQoZHgqZHggKyBkeSpkeSlcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gVG91Y2hJbnRlcnByZXRlclxyXG4iLCJCR01HYW1lU2NlbmUgPSByZXF1aXJlICcuL0JHTUdhbWVTY2VuZSdcclxuQkdNSHVkU2NlbmUgPSByZXF1aXJlICcuL0JHTUh1ZFNjZW5lJ1xyXG5cclxuaW5pdCA9IC0+XHJcbiAgY29uc29sZS5sb2cgXCJCYWQgR3V5IE1pbmVzd2VlcGVyOiBpbml0KClcIlxyXG5cclxuICBjb25maWcgPVxyXG4gICAgdHlwZTogUGhhc2VyLkFVVE9cclxuICAgIHdpZHRoOiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGhcclxuICAgIGhlaWdodDogZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodFxyXG4gICAgYmFja2dyb3VuZENvbG9yOiAnIzJkMmQyZCdcclxuICAgIHBhcmVudDogJ3NjcmVlbidcclxuICAgIGlucHV0OlxyXG4gICAgICBhY3RpdmVQb2ludGVyczogMlxyXG4gICAgc2NlbmU6IFtcclxuICAgICAgQkdNR2FtZVNjZW5lXHJcbiAgICAgIEJHTUh1ZFNjZW5lXHJcbiAgICBdXHJcblxyXG4gIGdhbWUgPSBuZXcgUGhhc2VyLkdhbWUoY29uZmlnKVxyXG5cclxuXHJcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgKGUpIC0+XHJcbiAgICBpbml0KClcclxuLCBmYWxzZSlcclxuIl19
